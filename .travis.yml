language: cpp
compiler: clang
git:
  depth: false
  quiet: true
  submodules: true
matrix:
  include:
    - os: linux
      dist: xenial
      sudo: required
      addons:
        apt:
          update: true
    - os: osx
      osx_image: xcode9.4
      env:
        - HOMEBREW_NO_AUTO_UPDATE=1
        - PATH=/usr/local/opt/qt5/bin:$PATH
        - PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig:/usr/local/opt/qt/lib/pkgconfig:$PKG_CONFIG_PATH
        - CPATH=/usr/local/opt/openssl/include:/usr/local/opt/qt/include:/usr/local/opt/qtkeychain/include:$CPATH
        - LD_LIBRARY_PATH=/usr/local/opt/openssl/lib:/usr/local/opt/qtkeychain/lib:$LD_LIBRARY_PATH
        - LDFLAGS="-L/usr/local/opt/openssl/lib -L/usr/local/opt/qtkeychain/lib $LDFLAGS"
        - CPPFLAGS="-I/usr/local/opt/openssl/include -I/usr/local/opt/qtkeychain/include $CPPFLAGS"
      cache:
        directories:
          - $HOME/Library/Caches/Homebrew
install:
  # - if [ $TRAVIS_OS_NAME == linux ]; then sudo add-apt-repository --yes ppa:ubuntu-sdk-team/ppa; fi
  # - if [ $TRAVIS_OS_NAME == linux ]; then sudo apt update -qq; fi
  - if [ $TRAVIS_OS_NAME == linux ]; then sudo apt install -y devscripts build-essential debhelper lintian qt5-default libssl-dev qt5keychain-dev fakeroot; fi
  - if [ $TRAVIS_OS_NAME == osx ]; then brew install openssl qt5 qtkeychain cryptopp; fi
before_script:
  # - if [ $TRAVIS_OS_NAME == osx ]; then export PATH=/usr/local/opt/qt5/bin:$PATH; fi
  # - if [ $TRAVIS_OS_NAME == osx ]; then export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig:/usr/local/opt/qt/lib/pkgconfig:$PKG_CONFIG_PATH; fi
  # - if [ $TRAVIS_OS_NAME == osx ]; then export CPATH=/usr/local/opt/openssl/include:/usr/local/opt/qt/include:/usr/local/opt/qtkeychain/include:$CPATH; fi
  # - if [ $TRAVIS_OS_NAME == osx ]; then export LD_LIBRARY_PATH=/usr/local/opt/openssl/lib:/usr/local/opt/qtkeychain/lib:$LD_LIBRARY_PATH; fi
  # - if [ $TRAVIS_OS_NAME == osx ]; then export LDFLAGS="-L/usr/local/opt/openssl/lib -L/usr/local/opt/qtkeychain/lib $LDFLAGS"; fi
  # - if [ $TRAVIS_OS_NAME == osx ]; then export CPPFLAGS="-I/usr/local/opt/openssl/include -I/usr/local/opt/qtkeychain/include $CPPFLAGS"; fi
  - qmake --version
  - make --version
script:
  - if [ $TRAVIS_OS_NAME == osx ]; then 
      mkdir build && cd build && qmake .. && make -j4 && mv openfortigui/openfortigui.app OpenFortiGUI.app && cd ..;
    fi
  - if [ $TRAVIS_OS_NAME == linux ]; then cd openfortigui; fi
  - if [ $TRAVIS_OS_NAME == linux ]; then debuild clean && echo "y" | debuild -eDEB_BUILD_OPTIONS="parallel=4" -us -uc; fi 
  - if [ $TRAVIS_OS_NAME == linux ]; then cd ../krunner_openfortigui; fi
  - if [ $TRAVIS_OS_NAME == linux ]; then debuild clean && echo "y" | debuild -eDEB_BUILD_OPTIONS="parallel=4" -us -uc; fi
  - if [ $TRAVIS_OS_NAME == linux ]; then cd .. && mkdir build && mv openforti*.deb build/; fi
  - ls build
after_success:
  - mkdir release
  - if [ $TRAVIS_OS_NAME == osx ]; then hdiutil create -volname OpenFortiGUI -srcfolder build/OpenFortiGUI.app -ov -format UDZO release/OpenFortiGUI.dmg; fi
  - if [ $TRAVIS_OS_NAME == linux ]; then mv build/openfortigui/openfortigui.deb release/; fi
  - ls .
  - ls release
deploy:
  provider: releases
  api_key:
    secure: $GITHUB_TOKEN
  tag_name: release-test
  name: release-test
  file_glob: true
  file: 
    - release/OpenFortiGUI.dmg
  draft: true
  skip_cleanup: true
  overwrite: true
  on:
    all_branches: true
    # tags: true
notifications:
  email: false
env:
  global:
  - LANG=en_US.UTF-8